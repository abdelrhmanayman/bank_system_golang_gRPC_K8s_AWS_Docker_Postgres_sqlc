// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfers.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_account,
    to_account,
    amount
) VALUES ($1, $2, $3) RETURNING id, from_account, to_account, amount, created_at
`

type CreateTransferParams struct {
	FromAccount int64 `json:"from_account"`
	ToAccount   int64 `json:"to_account"`
	Amount      int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccount, arg.ToAccount, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :one
DELETE FROM transfers WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteTransfer, id)
	err := row.Scan(&id)
	return id, err
}

const getTransfer = `-- name: GetTransfer :many
SELECT id, from_account, to_account, amount, created_at FROM transfers
WHERE from_account = $1 AND to_account = $2 LIMIT $3
`

type GetTransferParams struct {
	FromAccount int64 `json:"from_account"`
	ToAccount   int64 `json:"to_account"`
	Limit       int32 `json:"limit"`
}

func (q *Queries) GetTransfer(ctx context.Context, arg GetTransferParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfer, arg.FromAccount, arg.ToAccount, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccount,
			&i.ToAccount,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
